document.addEventListener("DOMContentLoaded", function () {
      const productId = new URLSearchParams(window.location.search).get("id");
      const userName = localStorage.getItem("username");
      const userId = localStorage.getItem("user_id")
      const API_BASE = 'http://localhost:8080/review';
      
      let currentReviews = [];

      // Utility functions
      function formatDate(dateString) {
        try {
          const date = new Date(dateString);
          return date.toLocaleDateString('vi-VN', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            
          });
        } catch (e) {
          return 'V·ª´a xong';
        }
      }

      function getUserAvatar(userName) {
        return `U${userName}`;
      }

      function showMessage(message, type = 'error') {
        const messagesDiv = document.getElementById('form-messages');
        messagesDiv.innerHTML = `
          <div class="${type === 'success' ? 'success-message' : 'error-message'}">
            ${message}
          </div>
        `;
        
        setTimeout(() => {
          messagesDiv.innerHTML = '';
        }, 5000);
      }

      // Fetch v√† hi·ªÉn th·ªã reviews
      async function loadReviews() {
        if (!productId) return;

        try {
          const response = await fetch(`${API_BASE}/get/${productId}`);
          
          if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°');
          }

          const reviews = await response.json();
          currentReviews = Array.isArray(reviews) ? reviews : [];
          renderReviews();
          updateReviewCount();
          
        } catch (error) {
          console.error('Error loading reviews:', error);
          document.getElementById('reviews-container').innerHTML = `
            <div class="error-message">
              Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i sau!
            </div>
          `;
        }
      }

      // Render danh s√°ch reviews
      function renderReviews() {
        const container = document.getElementById('reviews-container');
        
        if (currentReviews.length === 0) {
          container.innerHTML = `
            <div class="no-reviews">
              <div style="font-size: 48px; margin-bottom: 15px; opacity: 0.5;">üí≠</div>
              <p>Ch∆∞a c√≥ ƒë√°nh gi√° n√†o cho s·∫£n ph·∫©m n√†y.</p>
              <p>H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n chia s·∫ª tr·∫£i nghi·ªám c·ªßa b·∫°n!</p>
            </div>
          `;
          return;
        }

        const reviewsHTML = currentReviews
          .sort((a, b) => new Date(b.reviewDate) - new Date(a.reviewDate))
          .map(review => `
            <div class="review-item">
              <div class="review-header-info">
                <div class="user-avatar">
                  ${getUserAvatar(review.userName)}
                </div>
                <div class="review-meta">
                  <p class="reviewer-name"> #${review.userName}</p>
                  <p class="review-date">${formatDate(review.reviewDate)}</p>
                </div>
              </div>
              <p class="review-content">${review.comment}</p>
            </div>
          `).join('');

        container.innerHTML = `<div class="reviews-list">${reviewsHTML}</div>`;
      }

      // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng reviews
      function updateReviewCount() {
        const countElement = document.getElementById('review-count');
        const count = currentReviews.length;
        countElement.textContent = count === 0 
          ? 'Ch∆∞a c√≥ ƒë√°nh gi√° n√†o' 
          : `${count} ƒë√°nh gi√°`;
      }

      // Submit review m·ªõi
      async function submitReview(reviewText) {
        if (!userName) {
          showMessage('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ vi·∫øt ƒë√°nh gi√°!');
          return false;
        }

        if (!reviewText.trim()) {
          showMessage('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë√°nh gi√°!');
          return false;
        }

        try {
          const formData = new FormData();
          formData.append('productId', productId);
          formData.append('userId', userId);
          formData.append('reviewText', reviewText.trim());

          const response = await fetch(`${API_BASE}/create`, {
            method: 'POST',
            body: formData
          });

          if (!response.ok) {
            throw new Error('Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°');
          }

          const result = await response.json();
          showMessage('ƒê√°nh gi√° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng! üéâ', 'success');
          
          // Reload reviews ƒë·ªÉ hi·ªÉn th·ªã review m·ªõi
          setTimeout(() => {
            loadReviews();
          }, 1000);
          
          return true;
        } catch (error) {
          console.error('Error submitting review:', error);
          showMessage('Kh√¥ng th·ªÉ g·ª≠i ƒë√°nh gi√°. Vui l√≤ng th·ª≠ l·∫°i!');
          return false;
        }
      }

      // Event listeners
      document.getElementById('submit-review-form').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const textarea = document.getElementById('review-text');
        const submitBtn = document.getElementById('submit-review-btn');
        const reviewText = textarea.value.trim();
        
        if (!reviewText) {
          showMessage('Vui l√≤ng nh·∫≠p n·ªôi dung ƒë√°nh gi√°!');
          return;
        }

        // Disable form during submission
        submitBtn.disabled = true;
        submitBtn.innerHTML = `
          <span>‚è≥</span>
          <span>ƒêang g·ª≠i...</span>
        `;

        const success = await submitReview(reviewText);
        
        if (success) {
          textarea.value = '';
        }

        // Re-enable form
        submitBtn.disabled = false;
        submitBtn.innerHTML = `
          <span>üìù</span>
          <span>G·ª≠i ƒë√°nh gi√°</span>
        `;
      });

      // Ki·ªÉm tra tr·∫°ng th√°i ƒëƒÉng nh·∫≠p
      function checkLoginStatus() {
        const reviewForm = document.getElementById('review-form');
        
        if (!userName) {
          reviewForm.innerHTML = `
            <div style="background: #f8f9fa; padding: 30px; text-align: center; border-radius: 10px; border: 1px solid #e9ecef;">
              <h3 style="color: #666; margin-bottom: 15px;">üîê ƒêƒÉng nh·∫≠p ƒë·ªÉ vi·∫øt ƒë√°nh gi√°</h3>
              <p style="color: #888; margin-bottom: 20px;">B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ c√≥ th·ªÉ chia s·∫ª ƒë√°nh gi√° v·ªÅ s·∫£n ph·∫©m n√†y.</p>
              <a href="login.html" style="background: linear-gradient(135deg, #007bff, #0056b3); color: white; padding: 12px 30px; border-radius: 25px; text-decoration: none; display: inline-block; font-weight: 600;">
                ƒêƒÉng nh·∫≠p ngay
              </a>
            </div>
          `;
        }
      }

      // Initialize
      if (productId) {
        loadReviews();
        checkLoginStatus();
      }
    });